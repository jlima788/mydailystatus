{"ast":null,"code":"var _jsxFileName = \"/home/everaldo/Projects/mydailystatus/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport auth0 from '../lib/auth0';\nimport router from 'next/router';\nimport { db } from '../lib/db';\n\nconst App = props => {\n  useEffect(() => {\n    if (!props.pageProps.isAuth) {\n      router.push('/');\n    }\n  });\n\n  if (!props.pageProps.isAuth) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"App\"), __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, JSON.stringify(props.pageProps, null, 2)));\n};\n\nexport default App;\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n  const today = new Date();\n  const currentDate = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\n\n  if (session) {\n    const todaysCheckin = await db.collection('markers').doc(currentDate).collection('checks').doc(session.user.sub).get();\n    const todaysData = todaysCheckin.data();\n    let forceCreate = true;\n\n    if (todaysData) {\n      forceCreate = false;\n      const checkins = await db.collection('markers').doc(currentDate).collection('checks').near({\n        center: todaysData.coordinates,\n        radius: 1000\n      }).get();\n      const checkinsList = [];\n      checkins.docs.forEach(doc => {\n        checkinsList.push({\n          id: doc.id,\n          status: doc.data().status,\n          coords: {\n            lat: doc.data().coordinates.latitude,\n            long: doc.data().coordinates.longitude\n          }\n        });\n      });\n      return {\n        props: {\n          isAuth: true,\n          user: session.user,\n          forceCreate: false,\n          checkins: checkinsList\n        }\n      };\n    }\n\n    return {\n      props: {\n        isAuth: true,\n        user: session.user,\n        forceCreate\n      }\n    };\n  }\n\n  return {\n    props: {\n      isAuth: false,\n      user: {}\n    }\n  };\n}","map":{"version":3,"sources":["/home/everaldo/Projects/mydailystatus/pages/app.js"],"names":["React","useEffect","auth0","router","db","App","props","pageProps","isAuth","push","JSON","stringify","getServerSideProps","req","res","session","getSession","today","Date","currentDate","getFullYear","getMonth","getDate","todaysCheckin","collection","doc","user","sub","get","todaysData","data","forceCreate","checkins","near","center","coordinates","radius","checkinsList","docs","forEach","id","status","coords","lat","latitude","long","longitude"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport auth0 from '../lib/auth0'\nimport router from 'next/router'\nimport { db } from '../lib/db'\n\nconst App = (props) => {\n  useEffect(() => {\n    if(!props.pageProps.isAuth){\n      router.push('/')\n    } \n  })\n\n  if(!props.pageProps.isAuth){\n    return null\n  }\n\n  return (\n    <div>\n      <h1>App</h1>\n      <table>\n        \n      </table>\n      <pre>{JSON.stringify(props.pageProps, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default App\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req)\n  const today = new Date()\n  const currentDate = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate()\n  if(session){\n    const todaysCheckin = await db\n      .collection('markers')\n      .doc(currentDate)\n      .collection('checks')\n      .doc(session.user.sub)\n      .get()\n\n    const todaysData = todaysCheckin.data()\n    let forceCreate = true\n\n    if(todaysData){\n      forceCreate = false\n      const checkins = await db\n        .collection('markers')\n        .doc(currentDate)\n        .collection('checks')\n        .near({\n          center: todaysData.coordinates,\n          radius: 1000\n        })\n        .get()\n\n        const checkinsList = []\n\n        checkins.docs.forEach(doc => {\n          checkinsList.push({\n            id: doc.id,\n            status: doc.data().status,\n            coords: {\n              lat: doc.data().coordinates.latitude,\n              long: doc.data().coordinates.longitude\n            }\n          })\n        })\n\n        return {\n          props: {\n            isAuth: true,\n            user: session.user,\n            forceCreate: false,\n            checkins: checkinsList\n          }\n        }\n    } \n\n    return {\n      props: {\n        isAuth: true,\n        user: session.user,\n        forceCreate\n      }\n    }\n  }\n  return {\n    props: {\n      isAuth: false,\n      user: {}\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}